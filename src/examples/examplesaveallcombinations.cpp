/*
 * TraCurate â€“ A curation tool for object tracks.
 * Copyright (C) 2016 Sebastian Wagner
 *
 * TraCurate is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * TraCurate is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with TraCurate.  If not, see <https://www.gnu.org/licenses/>.
 */
#include <QDebug>
#include <QDir>

#include "project.h"
#include "io/importhdf5.h"
#include "io/exporthdf5.h"
#include "exceptions/tcdependencyexception.h"

#include "examples.h"

void exampleSaveAllCombinations() {
    using namespace TraCurate;

    QDir d(EXAMPLE_WRITE_DIR);
    for (QString entry : d.entryList())
        d.remove(entry);

    const int argc = 7;
    bool args[argc];
    const char *names[] = {
        "sAnnotations",
        "sAutoTracklets",
        "sEvents",
        "sImages",
        "sInfo",
        "sObjects",
        "sTracklets" };
    for (int i = 0; i < (1<<argc); i++) {
        for (int idx = 0; idx < argc; idx++) {
            args[idx] = (i>>idx) % 2;
            std::cerr << names[idx] << "=" << (args[idx]?"true ":"false") << " ";
        }
        std::cerr << "generated by " << i << std::endl;
        std::string name(EXAMPLE_WRITE_DIR);
        name += "/out";
        name += std::to_string(i);
        name += ".h5";

        ImportHDF5 ih;
        ExportHDF5 eh;

        std::shared_ptr<Project> proj = ih.load(EXAMPLE_SMALL_HDF5);

        std::cerr << "saving " << name << std::endl;
        try {
            Export::SaveOptions so{args[0], args[1], args[2], args[3], args[4], args[5], args[6]};
            eh.save(proj, QString(name.c_str()), so);
            std::cerr << "went well";
        } catch (TCDependencyException &e) {
            std::cerr << "threw exception " << e.what() << std::endl;
        } catch (std::exception &e) {
            std::cerr << "unhandled exception with parameters generated from " << i << ": " << e.what() << std::endl;
        }
    }

    exit(0);
}
